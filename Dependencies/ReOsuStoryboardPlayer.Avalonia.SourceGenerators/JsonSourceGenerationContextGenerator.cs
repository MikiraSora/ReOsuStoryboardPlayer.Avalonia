using System.Collections.Generic;
using System.Linq;
using System.Text;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;

namespace ReOsuStoryboardPlayer.Avalonia.SourceGenerators;

[Generator]
public class JsonSourceSupportGenerator : ISourceGenerator
{
    public void Initialize(GeneratorInitializationContext context)
    {
        // 注册语法接收器
        context.RegisterForSyntaxNotifications(() => new JsonSupportSyntaxReceiver());
    }

    public void Execute(GeneratorExecutionContext context)
    {
        if (context.SyntaxReceiver is not JsonSupportSyntaxReceiver receiver)
            return;

        var compilation = context.Compilation;
        var supportedTypes = new List<string>();

        foreach (var classDecl in receiver.CandidateClasses)
        {
            var model = compilation.GetSemanticModel(classDecl.SyntaxTree);
            if (model.GetDeclaredSymbol(classDecl) is not INamedTypeSymbol classSymbol)
                continue;

            foreach (var attr in classSymbol.GetAttributes())
                if (attr.AttributeClass?.ToDisplayString() ==
                    "ReOsuStoryboardPlayer.Avalonia.Utils.JsonSourceGenerationSupportAttribute" &&
                    attr.ConstructorArguments.Length == 1)
                {
                    var arg = attr.ConstructorArguments[0].Value as INamedTypeSymbol;
                    if (arg != null)
                        supportedTypes.Add(arg.ToDisplayString(SymbolDisplayFormat.FullyQualifiedFormat));
                }
        }

        if (supportedTypes.Count == 0)
            return;

        // 生成 JsonSourceGenerationContext
        var sb = new StringBuilder();
        sb.AppendLine("// <auto-generated />");
        sb.AppendLine("using System.Text.Json.Serialization;");
        sb.AppendLine();
        sb.AppendLine("namespace ReOsuStoryboardPlayer.Avalonia.Utils");
        sb.AppendLine("{");
        sb.AppendLine("    [JsonSourceGenerationOptions(WriteIndented = true)]");
        foreach (var type in supportedTypes.Distinct())
            sb.AppendLine($"    [JsonSerializable(typeof({type}))]");
        sb.AppendLine("    public partial class JsonSourceGenerationContext : JsonSerializerContext { }");
        sb.AppendLine("}");

        context.AddSource("JsonSourceGenerationContext.g.cs", sb.ToString());
    }

    private class JsonSupportSyntaxReceiver : ISyntaxReceiver
    {
        public List<ClassDeclarationSyntax> CandidateClasses { get; } = new();

        public void OnVisitSyntaxNode(SyntaxNode syntaxNode)
        {
            if (syntaxNode is ClassDeclarationSyntax cds &&
                cds.AttributeLists.Count > 0)
                CandidateClasses.Add(cds);
        }
    }
}